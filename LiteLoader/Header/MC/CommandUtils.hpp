// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA
class Actor;
#undef BEFORE_EXTRA

namespace CommandUtils {

#define AFTER_EXTRA

//    std::string getActorName(Actor &actor,int a1) {
//        //a1是没啥用的，只是为了改变符号
//        std::string (*rv)(Actor &);
//        *((void**)&rv) = dlsym("?getEntityName@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVActor@@@Z");
//        return (*rv)(actor);
//    }
#undef AFTER_EXTRA
    MCAPI extern std::vector<struct std::pair<std::string, char>> const CMD_INPUT_UNICODE_TRANSLATE_MAP;
    MCAPI bool addItemInstanceComponents(class ItemInstance &, class Json::Value const &, std::string &);
    MCAPI void alterSpawnableEntities(class LevelData &, struct ActorDefinitionIdentifier const &, struct ActorDefinitionIdentifier &);
    MCAPI void clearBlockEntityContents(class BlockSource &, class BlockPos const &);
    MCAPI class ItemStack createItemStack(std::string const &, int, int);
    MCAPI std::vector<class ItemStack> createItemStacks(class ItemInstance const &, int, int &);
    MCAPI bool createMapData(class Actor &, class ItemInstance &, class CommandOutput &);
    MCAPI void displayLocalizableMessage(bool, class Player &, std::string const &, std::vector<std::string> const &);
    MCAPI class BlockPos getFeetBlockPos(class Actor const *);
    MCAPI class Vec3 getFeetPos(class Actor const *);
    MCAPI std::vector<enum ActorType> getInvalidCommandEntities();
    MCAPI class Player const * getOriginPlayer(class CommandOrigin const &);
    MCAPI bool isPlayerSpawnedMob(class Actor *, class Actor *);
    MCAPI std::string toJsonResult(std::string const &, class Json::Value const &);

};